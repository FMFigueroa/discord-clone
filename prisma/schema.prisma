// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

/// Credencials for Connection
generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider     = "mysql"
  url          = env("DATABASE_URL")
  relationMode = "prisma"
}
// ==========================================
model Profile {
  id String @id @default(uuid())
  userId String @unique
  name String
  imageUrl String @db.Text
  email String @db.Text

  ///Relations
  servers Server[]
  members Member[]
  channels Channel[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

// ==========================================
model Server{
  id String @id @default(uuid())
  name String
  imageUrl String @db.Text
  inviteCode String @db.Text

  profileId String
  profile Profile @relation(fields: [profileId], references: [id], onDelete: Cascade)

  //Relations
  members Member[]
  channels Channel[]
 
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  /// foreign keys
  @@index([profileId])
}

// ==========================================
enum MemberRole {
  ADMIN
  MODERATOR
  GUEST
}

model Member {
  id String @id @default(uuid())
  role MemberRole @default(GUEST)

  /// Relatioin with Profile
  profileId String
  profile Profile @relation(fields: [profileId], references: [id], onDelete: Cascade)
 
  /// Relatioin with Server
  serverId String
  servers Server @relation(fields: [serverId], references: [id], onDelete: Cascade)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  /// foreign keys
  @@index([profileId])
  @@index([serverId])
}

// ==========================================
enum ChannelType{
  TEXT
  AUDIO
  VIDEO
}

model Channel {
  id String @id @default(uuid())
  name String
  type ChannelType @default(TEXT)

  /// Relatioin with Profile
  profileId String
  profile Profile @relation(fields: [profileId], references: [id], onDelete: Cascade)

  /// Relatioin with Server
  serverId String
  servers Server @relation(fields: [serverId], references: [id], onDelete: Cascade)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  /// foreign keys
  @@index([profileId])
  @@index([serverId])
}

// Every time we edit schema.prisma, you must execute these two commands:

// 1) Generate the Schemes to node_modules
// npx prisma generate

// 2) Create all Collections into your PlanetScale Database
// npx prisma db push